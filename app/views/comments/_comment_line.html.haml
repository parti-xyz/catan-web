%a.anchor.js-stress-anchor{ id: comment_line_anchor_dom_id(comment), data: { 'stress-target': "#{comment_line_dom_selector(comment)} .body", 'stress-class': 'body-comment-anchor-stress' } }
.comment-line{ class: "#{comment_line_dom_id(comment)} #{('js-comment-reader-line' unless comment.read?(current_user))}", data: { 'comment-id': comment.id } }
  .clearfix
    .comment-user{ class: ('comment-user-child' if comment.parent.present?) }
      = link_to smart_user_gallery_path(comment.user) do
        .thumb.user-image.img-circle{ class: ('user-image-small' if comment.parent.present?), style: "background-image: url(#{comment.user.image.sm.url});" }
    .comment-content.js-comment-edit-form-target{ class: ('comment-content-child' if comment.parent.present?) }
      - chevron_menu = capture do
        - unless comment.almost_deleted?
          - if can? :update, comment
            %li
              = link_to edit_comment_path(comment), remote: true, class: 'link-edit' do
                수정
          - if can? :destroy, comment
            %li
              = link_to comment, method: :delete, remote: true, data: { confirm: '정말 삭제하시겠습니까?' }, class: 'link-destroy' do
                삭제

      .body-wrapper{ class: "#{('body-wrapper--with-chevron_menu' if chevron_menu.present?)} #{('body-wrapper--with-unread' unless comment.read?(current_user))}" }
        .body{ class: ("body--#{comment.choice}" if comment.choice.present? && !comment.post&.poll&.hidden_voters?) }
          = render 'comments/body', local_assigns
          - dropdown_dom_id = "#{dom_id(comment)}__chevron-buttons"
          - if chevron_menu.present?
            .comment__chevron-buttons
              %button.btn.btn-link.btn-sm.dropdown-toggle{ id: dropdown_dom_id, "aria-expanded": "false", "aria-haspopup": "true", "data-toggle": "dropdown" }
                %i.fa.fa-ellipsis-v
              %ul.dropdown-menu.pull-right{ "aria-labelledby": dropdown_dom_id }
                = chevron_menu

      - if !comment.almost_deleted? && !comment.blinded?(current_user)
        - if comment.file_sources.any?
          .file-sources.js-photoswipe
            - single_image_breakpoint = 700
            - if is_small_screen?
              - single_image_breakpoint = 270

            - comment.file_sources.only_image.each_with_index do |file_source, index|
              - image_photoswipe_width = file_source.image_width_lg
              - image_photoswipe_heigh = file_source.image_height_lg

              - if file_source.image_width < single_image_breakpoint
                - image_single_url = file_source.attachment.url
                - image_photoswipe_width = file_source.image_width
                - image_photoswipe_heigh = file_source.image_height

              - action_options = { 'data-url': file_source.attachment.lg.url, 'data-original-url': (download_file_source_url(file_source) unless is_small_screen?), 'data-width': image_photoswipe_width, 'data-height': image_photoswipe_heigh, 'data-title': excerpt(comment.body_striped_tags, length: 120), 'data-index': index }
              .file-source-image.js-photoswipe-image.cursor-pointer{ action_options }
                %img{ src: file_source.attachment.xs.url }
            - comment.file_sources.only_doc.sort_by_seq_no.each do |file_source|
              .file-source-doc
                / 하위호환을 위한 dummy post id를 넘겨줍니다
                %a.file-title.cursor-pointer.clearfix.js-download{ href: file_source.url, 'data-post-id': 0, 'data-file-source-id': file_source.id, 'data-file-name': file_source.name }
                  %i.fa.fa-floppy-o
                  = truncate(file_source.name, length: 100)
        .footer
          = render 'upvotes/upvote', upvotable: comment
          - if local_assigns[:comment_form_control]
            - if !user_signed_in? or local_assigns[:unsigned]
              = link_to '#', data: { toggle: 'parti-login-overlay' }, class: 'comment__mention' do
                댓글달기
            - else
              %a.comment__mention.cursor-pointer.js-mention{ href: '#', data: { 'comment-form-control': comment_form_control, 'mention-nickname': (comment.user.nickname if comment.user != current_user) } }
                댓글달기
          .upvote-count
            = render 'upvotes/upvote_count', upvotable: comment

          = link_to comment_path(comment), class: 'date-wrapper' do
            = date_f comment.created_at

          - unless comment.read?(current_user)
            .comment__unread-mark.text-primary
              %i.fa.fa-bolt
